

object Standalone2 extends App {

  //1) Write standalone application by extending App to print some string to output screen
  //2) implement ops method similar to Standalone2.java

  // see Standalone.java for more help
  println(ops(10, 5, "+"))
  println(ops(10, 5, "-"))
  println(ops(10, 5, "*"))
  println(ops(10, 5, "/"))

  def ops(x: Integer, y: Integer, ops: String): Integer = {
    if (ops == "+") {
      return x + y
    }
    else if (ops eq "-") {
      return x - y
    }
    else if (ops eq "*") {
      return x * y
    }
    else if (ops eq "/") {
      return x / y
    }
    return -1
  }
}

===========

object PatternMatching extends App{



 for {
  x <- Seq(1, 2, 2.7, "one", "two", 'four) // 1
 } {
  val str = x match {
   // 2
   case 1 => "int 1" // 3
   case i: Int => "other int: " + i // 4
   case d: Double => "a double: " + x // 5
   case "one" => "string one" // 6
   case s: String => "other string: " + s // 7
   case unexpected => "unexpected value: " + unexpected // 8
  }
  println(str)

 }
}

=======
object PatternMatching1 extends App{
  /**
    * write factorial function with help of pattern matching
    * fact function accepts x of type Int and returns an Int
    * refer to PatternMatching.java for more help
    *
    */

  def fact(x: Int): Int  = x match {
    case 0 => 1
    case _ => x * fact(x-1)

  }

  println(fact(6))
}

=====

object Yield extends App {

  //find even numbers which is greater than 1o from range 0 to 20
  val results = for (i <- 0 to 20 if i%2==0 ; if i <10) yield i

  print(results)

}
====
object MapExample extends App{
  val mapValues = Map(1 -> "Red", 2 -> "Green",3 -> "Orange", 4 -> "Red",5-> "Blue", 6 -> "Green", 7 -> "While")
  System.out.println(mapValues)
//Map(5 -> Blue, 1 -> Red, 6 -> Green, 2 -> Green, 7 -> While, 3 -> Orange, 4 -> Red)
// Map(Red -> List(1, 4), Blue -> List(5), Green -> List(6, 2), While -> List(7), Orange -> List(3))


  //if map has unique values
   var stringToInt: Map[String, Int] = mapValues.map(x => x._2 -> x._1)
  System.out.println(stringToInt)

  var values: Map[String, Iterable[Int]] = mapValues.groupBy(_._2).mapValues(_.keys.toList)
  System.out.println(values)



}